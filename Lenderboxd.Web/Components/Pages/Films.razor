@page "/films/{user?}/{list?}"
@page "/{user?}/{list?}"
@using System.Diagnostics;
@using Microsoft.AspNetCore.Mvc.Routing
@inject NavigationManager NavigationManager;
@inject IGrainFactory GrainFactory;
@inject IHttpContextAccessor Ctx;
@inject ILogger<Films> Logger;
@preservewhitespace false

@code
{
	public const string LetterboxdBaseUrl = "https://letterboxd.com";
	public const string LetterboxdListPattern = "/{user}/list/{list}/{**rest}";

	[SupplyParameterFromForm]
	public string? ListUrl { get; set; }

	[Parameter]
	public bool Subscribe { get; set; } = true;

	[Parameter]
	public string? User { get; set; }

	[Parameter]
	public string? List { get; set; }

	string ListTitle { get; set; } = "";
	IEnumerable<Film> FilmList { get; set; } = [];
	MediaFormat[]?[] Availability { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		if (ListUrl?.StartsWith(LetterboxdBaseUrl) == true && Uri.TryCreate(ListUrl, UriKind.Absolute, out var uri))
		{
			if (RouteMatcher.TryMatch(LetterboxdListPattern, uri.AbsolutePath, out var values))
			{
				User = values["user"]!.ToString()!.ToLower();
				List = values["list"]!.ToString()!.ToLower();
			}
		}

		if (User is not null && List is not null)
		{
			var listGrain = GrainFactory.GetGrain<ILetterboxdList>($"{User}/{List}");
			var timer = Stopwatch.StartNew();
			FilmList = await listGrain.GetFilms() ?? await listGrain.LoadFilms(refresh: false);
			Logger.LogDebug("Took {time} to fetch film list", timer.Elapsed);
			timer.Restart();
			ListTitle = (await listGrain.GetTitle()) ?? listGrain.GetPrimaryKeyString().ToLower();
			Logger.LogDebug("Took {time} to fetch film title", timer.Elapsed);
			timer.Restart();
			Availability = await listGrain.GetFilmAvailability("www.richlandlibrary.com")
			?? await listGrain.LoadFilmAvailability("www.richlandlibrary.com");
			Logger.LogDebug("Took {time} to fetch film availability", timer.Elapsed);
			ListUrl = $"{LetterboxdBaseUrl}/{User}/list/{List}";
		}
		else
		{
			// set a default so users can more easily get started
			ListUrl = $"{LetterboxdBaseUrl}/dave/list/official-top-250-narrative-feature-films/";
		}

		await base.OnInitializedAsync();
	}

	bool HasPendingAvailability => Availability.Any(v => v is null);
	bool HasDuplicate => FilmList.DistinctBy(f => f.Title).Count() < FilmList.Count();
	string Path => User is not null && List is not null ? $"/{User}/{List}" : "";
}

<main id="main">
	@if (User is null && List is null)
	{
		<PageTitle>Lenderboxd - Search</PageTitle>
		<h1> Welcome to Lenderboxd </h1>
		<p>
			This is a tool for cross-referencing
			<a href="@ListUrl" target="_blank">Letterboxd
				lists</a>
			with the
			<a href="https://www.richlandlibrary.com/" target="_blank">Richland County Public Library</a> catalog.
			<br>
			<br>
			Simply paste the link to a Letterboxd list in the input below and wait for the results to come in. Feel free to
			leave the page for long lists and come back later to see the results.
		</p>
	}
	else
	{
		if (!FilmList.Any())
		{
			<p>No list was found at the specified url.</p>
		}
		else
		{
			<PageTitle>Lenderboxd - @ListTitle</PageTitle>

			<h2>@ListTitle</h2>

			@if (HasDuplicate)
			{
				<p class="notice">
					Availability results may not be accurate for films with the same title.
				</p>
			}

			<FilmTable Films="FilmList" Availability="Availability" />
		}
	}
</main>

@if (Subscribe && HasPendingAvailability)
{
	<div data-on-load="$$get('/film-list/@User/@List/events')"></div>
}

<div class="drawer" data-store="{ url: '@ListUrl', submitting: false }">
	<div id="urlDisplay" data-text="$url" style="font-size: x-small; margin: .5rem; margin-top: 0;">@ListUrl</div>
	<form id="searchForm" method="post" action="/" style="font-size: small;" @formname="@nameof(Films)"
		data-class="{ loading: $submitting }" data-on-submit="$submitting = true">
		<fieldset class="input-button">
			<InputText id="urlInput" @bind-Value="ListUrl" onfocus="this.select()" class="input"
				placeholder="Letterboxd list url" pattern="https://letterboxd.com/[^\/.]+?/list/[^\/.]+?.*"
				data-model="url" />
			<button class="btn flex" style="width: 6rem" type="submit" data-bind-disabled="$submitting">
				<span class="text">Submit</span>
				<Loader id="searchLoader" class="small plain" />
			</button>

		</fieldset>
		<AntiforgeryToken />
	</form>
</div>

@if (Path != "" && Path != Ctx.HttpContext?.Request.Path)
{
	<script>
	// Since the form post endpoint won't have the user/list in the path, update URL client-side
	history.replaceState(null, null, "@Path");
</script>
}
